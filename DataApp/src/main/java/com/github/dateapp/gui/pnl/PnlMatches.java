package com.github.dateapp.gui.pnl;

import com.github.dateapp.Database;
import com.github.dateapp.User;
import com.github.dateapp.Util;
import com.github.dateapp.ViewPanel;
import com.github.dateapp.gui.FrameMain;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;

/**
 * Matches panel.
 *
 * @author Matthew
 */
public final class PnlMatches extends ViewPanel {

    private final FrameMain parent;

    /**
     * Creates new form Matches panel.
     *
     * @param parent parent main frame
     */
    public PnlMatches(FrameMain parent) {
        this.initComponents();

        this.parent = parent;
        this.pnlMatches.setLayout(new GridLayout(0, 2));

        getMatches().stream().map((userID) -> getUser(userID)).map((user) -> {
            System.out.println(user);
            return user;
        }).forEachOrdered((user) -> {
            String name = String.format("%s %s", user.getFirstName(), user.getLastName());

            JButton match = new JButton(name);
            match.addActionListener((ActionEvent evt) -> {
//                new DialogViewUser(parent, user).setVisible(true);
                parent.changePannel(new PnlMessages(parent, user));
            });

            JLabel img = new JLabel(new ImageIcon(Util.resize(user.getProfilePic(), 128, 128)));
            img.setToolTipText(name);

            this.pnlMatches.add(img);
            this.pnlMatches.add(match);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * <strong>WARNING: Do NOT modify this code.</strong> The content of this
     * method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        pnlMatches = new javax.swing.JPanel();

        javax.swing.GroupLayout pnlMatchesLayout = new javax.swing.GroupLayout(pnlMatches);
        pnlMatches.setLayout(pnlMatchesLayout);
        pnlMatchesLayout.setHorizontalGroup(
            pnlMatchesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 564, Short.MAX_VALUE)
        );
        pnlMatchesLayout.setVerticalGroup(
            pnlMatchesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 426, Short.MAX_VALUE)
        );

        scrollPane.setViewportView(pnlMatches);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane)
        );
    }// </editor-fold>//GEN-END:initComponents

    private List<Integer> getMatches() {
        ArrayList<Integer> rtn = new ArrayList<>();
        try {
            Statement stmt = Database.getStatement();

            String q = String.format("SELECT `userB` FROM Compatible WHERE `userA` = %d",
                    parent.getUser().getID());
            System.out.println(q);

            ResultSet rs = stmt.executeQuery(q);
            while (rs.next()) {
                rtn.add(rs.getInt("userB"));
            }

            rs.close();
            stmt.close();
        } catch (SQLException sqle) {
            Util.err(sqle, parent);
        }
        return rtn;
    }

    private User getUser(int userID) {
        User rtn = null;
        try {
            Statement stmt = Database.getStatement();

            String q = String.format("SELECT * FROM SinglePerson WHERE userID = %d", userID);
            System.out.println(q);

            ResultSet rs = stmt.executeQuery(q);
            rs.next();

            rtn = new User(rs);

            rs.close();
            stmt.close();
        } catch (SQLException sqle) {
            Util.err(sqle, parent);
        }

        return rtn;
    }

    //<editor-fold defaultstate="collapsed" desc="Generated Varibles">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlMatches;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>
}
